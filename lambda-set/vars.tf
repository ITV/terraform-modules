// The name of the Lambda function
variable "name" {
  type = string
}
// The Lambda handler
variable "handler" {
  type = string
}
// The Lambda runtime
variable "runtime" {
  type = string
}
// The Lambda memory size (in MB)
variable "memory_size" {
  type = number
}
// The Lambda timeout (in seconds)
variable "timeout" {
  type = number
}
// Whether it's a Lambda@Edge function
variable "edge" {
  type = bool
}
// Whether to create this Lambda function (used for optional modules that may or may not exist depending on other resources/settings)
variable "create" {
  type    = bool
  default = true
}
// The directory that contains all files that must be bundled into the Lambda archive for upload
// Either this or the "archive" variable must be provided.
variable "directory" {
  type    = string
  default = null
}
// The data.archive_file object that is the archive to upload
// Either this or the "directory" variable must be provided.
variable "archive" {
  type = object({
    output_path         = string
    output_base64sha256 = string
  })
  default = {
    output_path         = ""
    output_base64sha256 = ""
  }
}
// Any policies to attach to the role that this Lambda runs as
variable "role-policy-arns" {
  type    = list(string)
  default = []
}
// How many days to retain CloudWatch logs generated by this Lambda
variable "cloudwatch_retention_days" {
  type    = number
  default = 14
}
// An optional list of service/arn pairs that should be allowed to invoke this Lambda.
// The service value is required, the arn can be 'null' to allow everything from that service.
variable "execution-services" {
  type = list(object({
    service = string
    arn     = string
  }))
  default = []
}
// The VPC config for the Lambda. If 'null' (default), the Lambda is not placed in a VPC.
variable "vpc_config" {
  type = object({
    subnet_ids         = list(string)
    security_group_ids = list(string)
  })
  default = null
}
// A map of environment variable key-value pairs
variable "environment" {
  type    = map(any)
  default = {}
}
// The schedule to run this Lambda on (uses CloudWatch Events schedule notation). If not provided, the Lambda will not run on a schedule
variable "schedule" {
  type    = string
  default = null
}

locals {
  archive = var.create ? (var.archive.output_path != "" ? var.archive : {
    output_path         = data.archive_file.archive[0].output_path
    output_base64sha256 = data.archive_file.archive[0].output_base64sha256
  }) : null
}
